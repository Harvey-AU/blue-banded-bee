name: Run Tests
on:
  pull_request:
    branches:
      - main
      - test-branch
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - 'CHANGELOG.md'
      - 'SECURITY.md'
      - 'Roadmap.md'
      - 'QandA.md'
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - 'CHANGELOG.md'
      - 'SECURITY.md'
      - 'Roadmap.md'
      - 'QandA.md'

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Check Go version
        run: go version

      - name: Run unit tests
        run: |
          echo "=== Running Unit Tests ==="
          # Run tests without integration tag (unit tests and tests without tags) with race detection
          go test -v -race -short -shuffle=on -coverprofile=coverage-unit.out -coverpkg=./... ./...
          
      - name: Run integration tests
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DB_URL || secrets.TEST_DATABASE_URL }}
        run: |
          echo "=== Running Integration Tests ==="
          # Install tools for test reporting
          go install github.com/jstemmer/go-junit-report/v2@latest
          
          # Run only integration tests with race detection
          set +e  # Don't exit on error temporarily
          go test -v -race -coverprofile=coverage-integration.out -coverpkg=./... -tags=integration ./... -json > test-output.json
          TEST_EXIT_CODE=$?
          echo "Test exit code: $TEST_EXIT_CODE"
          set -e  # Re-enable exit on error
          
          # Show some test output for debugging
          echo "=== Test Results ==="
          if grep -q '"Action":"fail"' test-output.json; then
            echo "Found test failures:"
            grep -E '"Action":"fail"' test-output.json || true
            grep -B 5 -A 5 '"Action":"fail"' test-output.json | head -50 || true
          else
            echo "All tests passed!"
            echo "Packages tested:"
            grep '"Action":"pass"' test-output.json | grep -o '"Package":"[^"]*"' | sort -u || true
          fi
          
          # Convert to JUnit XML (this won't fail even if tests failed)
          $(go env GOPATH)/bin/go-junit-report -parser gojson < test-output.json > junit.xml
          
          # Show coverage summary
          echo "=== Coverage Summary ==="
          go tool cover -func=coverage-integration.out || true
          
          # Exit with the original test exit code
          exit ${TEST_EXIT_CODE}

      - name: Merge coverage reports
        if: always()
        run: |
          echo "=== Merging Coverage Reports ==="
          # Install gocovmerge to merge coverage files
          go install github.com/wadey/gocovmerge@latest
          
          # Merge unit and integration coverage
          if [ -f coverage-unit.out ] && [ -f coverage-integration.out ]; then
            $(go env GOPATH)/bin/gocovmerge coverage-unit.out coverage-integration.out > coverage.out
          elif [ -f coverage-unit.out ]; then
            cp coverage-unit.out coverage.out
          elif [ -f coverage-integration.out ]; then
            cp coverage-integration.out coverage.out
          fi
          
          # Show total coverage
          if [ -f coverage.out ]; then
            echo "=== Total Coverage ==="
            go tool cover -func=coverage.out | tail -1
          fi

      - name: Check coverage floors
        if: always()
        run: |
          echo "=== Checking Coverage Floors ==="
          
          # Extract coverage percentages for critical packages
          if [ -f coverage.out ]; then
            DB_COVERAGE=$(go tool cover -func=coverage.out | grep "github.com/Harvey-AU/blue-banded-bee/internal/db" | awk '{print $3}' | sed 's/%//')
            JOBS_COVERAGE=$(go tool cover -func=coverage.out | grep "github.com/Harvey-AU/blue-banded-bee/internal/jobs" | awk '{print $3}' | sed 's/%//')
            
            echo "DB Package Coverage: ${DB_COVERAGE}%"
            echo "Jobs Package Coverage: ${JOBS_COVERAGE}%"
            
            # Set minimum coverage floors
            DB_MIN=10
            JOBS_MIN=15
            
            # Check if coverage meets minimum requirements
            if [ ! -z "$DB_COVERAGE" ]; then
              if (( $(echo "$DB_COVERAGE < $DB_MIN" | bc -l) )); then
                echo "❌ DB package coverage ${DB_COVERAGE}% is below minimum ${DB_MIN}%"
                exit 1
              else
                echo "✅ DB package coverage ${DB_COVERAGE}% meets minimum ${DB_MIN}%"
              fi
            fi
            
            if [ ! -z "$JOBS_COVERAGE" ]; then
              if (( $(echo "$JOBS_COVERAGE < $JOBS_MIN" | bc -l) )); then
                echo "❌ Jobs package coverage ${JOBS_COVERAGE}% is below minimum ${JOBS_MIN}%"
                exit 1
              else
                echo "✅ Jobs package coverage ${JOBS_COVERAGE}% meets minimum ${JOBS_MIN}%"
              fi
            fi
          fi

      - name: Upload unit test coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-unit.out
          flags: unit
          name: unit-tests
          fail_ci_if_error: false
          verbose: true

      - name: Upload integration test coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-integration.out
          flags: integration
          name: integration-tests
          fail_ci_if_error: false
          verbose: true

      - name: Upload combined coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          flags: all
          name: all-tests
          fail_ci_if_error: false
          verbose: true

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./junit.xml

      - name: Upload static analysis to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_STATIC_TOKEN }}
          flags: static-analysis
          name: static-analysis
          fail_ci_if_error: false
          verbose: true