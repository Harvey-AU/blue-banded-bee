name: Deploy Review App

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, closed]
    paths-ignore:
      - "**.md"
      - "docs/**"
      - "LICENSE"
      - ".gitignore"
      - "CHANGELOG.md"
      - "SECURITY.md"
      - "Roadmap.md"

jobs:
  deploy-review:
    name: Deploy Review App
    runs-on: blacksmith-4vcpu-ubuntu-2404
    if: github.event.pull_request.draft == false
    permissions:
      pull-requests: write
    env:
      APP_NAME: blue-banded-bee-pr-${{ github.event.number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Ensure review app exists
        run: |
          if ! flyctl apps show "${APP_NAME}" >/dev/null 2>&1; then
            echo "Creating new review app: ${APP_NAME}"
            flyctl apps create "${APP_NAME}" --org personal
          else
            echo "Review app already exists: ${APP_NAME}"
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Fetch Supabase preview database URL
        id: supabase-preview
        run: |
          set -eo pipefail

          if [ -z "${SUPABASE_ACCESS_TOKEN}" ] || [ -z "${SUPABASE_PROJECT_REF}" ]; then
            echo "Supabase credentials (SUPABASE_ACCESS_TOKEN / SUPABASE_PROJECT_REF) are required." >&2
            exit 1
          fi

          supabase login --token "${SUPABASE_ACCESS_TOKEN}" >/dev/null

          BRANCH_NAME="${PR_BRANCH}"
          PR_NUM="${PR_NUMBER:-0}"
          BRANCH_SLUG=$(echo "${BRANCH_NAME}" | tr '/' '-')
          echo "Waiting for Supabase preview branch for ${BRANCH_NAME}"

          for attempt in $(seq 1 12); do
            supabase branches list --project-ref "${SUPABASE_PROJECT_REF}" --output json > branches.json

            echo "Known Supabase preview branches:"
            jq -r '.[].name' branches.json | sed 's/^/  - /'

            BRANCH_JSON=$(jq -c \
              --arg name "${BRANCH_NAME}" \
              --arg slug "${BRANCH_SLUG}" \
              --arg base "preview/${BRANCH_SLUG}" \
              --argjson pr "${PR_NUM}" '
              map(select(
                (.name // "") == $name or
                (.name // "") == $slug or
                (.name // "") == $base or
                (.name // "" | sub("^preview/"; "")) == $name or
                (.name // "" | sub("^preview/"; "")) == $slug or
                (.git_branch // "") == $name or
                (.git_branch // "") == $slug or
                (.git_branch // "" | sub("^refs/heads/"; "")) == $name or
                (.git_branch // "" | sub("^refs/heads/"; "")) == $slug or
                (.pull_request_number // 0) == $pr
              )) | first' branches.json)

            if [ -n "${BRANCH_JSON}" ] && [ "${BRANCH_JSON}" != "null" ]; then
              BRANCH_ID=$(echo "${BRANCH_JSON}" | jq -r '.id')

              DB_URL=$(supabase branches get "${BRANCH_ID}" --project-ref "${SUPABASE_PROJECT_REF}" --output env | grep -m1 '^DATABASE_URL=' | cut -d= -f2-)

              if [ -n "${DB_URL}" ]; then
                echo "::add-mask::${DB_URL}"
                echo "database_url=${DB_URL}" >> "${GITHUB_OUTPUT}"
                rm -f branches.json
                supabase logout >/dev/null 2>&1 || true
                exit 0
              fi
            fi

            echo "Preview branch not ready yet (attempt ${attempt}/12). Retrying in 10s..."
            sleep 10
          done

          echo "Failed to obtain Supabase preview DATABASE_URL after waiting." >&2
          jq '.' branches.json || true
          rm -f branches.json
          supabase logout >/dev/null 2>&1 || true
          exit 1
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          PR_BRANCH: ${{ github.head_ref }}
          PR_NUMBER: ${{ github.event.number }}

      - name: Configure Supabase preview database
        run: |
          flyctl secrets set DATABASE_URL="${DATABASE_URL}" --app "${APP_NAME}"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          DATABASE_URL: ${{ steps.supabase-preview.outputs.database_url }}

      - name: Deploy Review App
        run: |
          flyctl deploy \
            --app "${APP_NAME}" \
            --config .fly/review_apps.toml \
            --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Comment PR with app URL
        uses: actions/github-script@v7
        with:
          script: |
            const appName = `blue-banded-bee-pr-${{ github.event.number }}`;
            const appUrl = `https://${appName}.fly.dev`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üêù **Review App Deployed!**

              **Test URL**: ${appUrl}

              üìã **Test Features:**
              1. Visit homepage: ${appUrl}/
              2. Test authentication and job creation flow
              3. Check dashboard functionality
              4. Verify database operations work correctly

              üóÑÔ∏è **Database**: Supabase preview branch for this PR
              ‚ö†Ô∏è *Preview environment - app and database cleaned up when PR closes*`
            });

  cleanup-review:
    name: Cleanup Review App
    runs-on: blacksmith-4vcpu-ubuntu-2404
    if: github.event.action == 'closed'

    steps:
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Destroy Review App
        run: |
          APP_NAME="blue-banded-bee-pr-${{ github.event.number }}"
          flyctl apps destroy $APP_NAME --yes || echo "App may not exist"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
