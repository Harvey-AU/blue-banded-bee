#!/bin/bash
# Pre-commit hook to automatically format files before committing
# This hook runs gofmt on Go files and prettier on docs/config files
# Compatible with: Mac, Linux, Windows (Git Bash)

set -e

echo "Running pre-commit formatting checks..."

# Detect if we're on Windows (Git Bash)
IS_WINDOWS=false
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    IS_WINDOWS=true
fi

# Colours for output (disable on Windows if needed)
if [ "$IS_WINDOWS" = true ]; then
    RED=''
    GREEN=''
    YELLOW=''
    NC=''
else
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    NC='\033[0m'
fi

# Track if any files were formatted
FILES_FORMATTED=false

# === CHECK FOR AI ATTRIBUTION IN COMMIT MESSAGE ===
echo ""
echo "ü§ñ Checking commit message for AI attribution..."

# Get the commit message from the commit-msg file (will be created by git)
# For pre-commit, we check if user is trying to use -m flag with banned content
# Note: This catches most cases, but commit-msg hook is more thorough
COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

    # Check for common AI attribution patterns (case-insensitive)
    if echo "$COMMIT_MSG" | grep -iE '(claude|gemini|chatgpt|gpt-|copilot|Generated with|Co-Authored-By: Claude)' > /dev/null; then
        echo -e "${RED}‚ùå ERROR: Commit message contains AI attribution${NC}"
        echo ""
        echo "Found banned terms in commit message:"
        echo "$COMMIT_MSG" | grep -iE '(claude|gemini|chatgpt|gpt-|copilot|Generated with|Co-Authored-By: Claude)'
        echo ""
        echo "Please remove AI attribution from your commit message."
        echo "See CLAUDE.md for commit message guidelines."
        exit 1
    fi
fi

echo "  ‚úÖ No AI attribution found"

# === FORMAT GO FILES ===
echo ""
echo "üìù Formatting Go files..."

# Get list of staged Go files
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)

if [ -n "$STAGED_GO_FILES" ]; then
    echo "Found Go files to format:"
    echo "$STAGED_GO_FILES"

    # Format each file
    for file in $STAGED_GO_FILES; do
        if [ -f "$file" ]; then
            gofmt -w "$file"
            git add "$file"
            echo "  ‚úÖ Formatted: $file"
            FILES_FORMATTED=true
        fi
    done
else
    echo "  ‚ÑπÔ∏è  No Go files to format"
fi

# === FORMAT DOCS/CONFIG FILES ===
echo ""
echo "üìù Formatting docs and config files..."

# Check if prettier is installed
if ! command -v prettier &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Prettier not installed. Install with: npm install -g prettier${NC}"
    echo "Skipping prettier formatting..."
else
    # Get list of staged markdown/YAML/JSON/HTML/CSS/JS files
    STAGED_DOC_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(md|yml|yaml|json|html|css|js)$' || true)

    if [ -n "$STAGED_DOC_FILES" ]; then
        echo "Found docs/config files to format:"
        echo "$STAGED_DOC_FILES"

        # Format files with prettier (suppress warnings)
        echo "$STAGED_DOC_FILES" | xargs prettier --write --log-level warn 2>/dev/null || \
        echo "$STAGED_DOC_FILES" | xargs prettier --write

        # Re-add formatted files
        echo "$STAGED_DOC_FILES" | xargs git add

        echo "  ‚úÖ Formatted with prettier"
        FILES_FORMATTED=true
    else
        echo "  ‚ÑπÔ∏è  No docs/config files to format"
    fi
fi

# === SUMMARY ===
echo ""
if [ "$FILES_FORMATTED" = true ]; then
    echo -e "${GREEN}‚ú® Files formatted successfully!${NC}"
    echo "Changes have been staged. Your commit will now proceed."
else
    echo -e "${GREEN}‚úÖ All staged files were already formatted${NC}"
fi

echo ""
exit 0
